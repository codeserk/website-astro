---
import Container from '../Container.astro'
import ProgressBar from '../ProgressBar.astro'

interface Props {
  readonly src: string
  readonly aspectRatio?: string
}

const { src, aspectRatio = '3/2' } = Astro.props
// eslint-disable-next-line no-eval
const calculatedAspectRatio = eval(aspectRatio)
---

<div class="WebGame">
  <Container layout="full">
    <h2 class="section-header">Game ðŸŽ®</h2>

    <div class="canvas-container bordered lg">
      <div class="overlay-menu">
        <button class="button play-button circled sm">PLAY ðŸŽµ</button>
        <ProgressBar percent={10} text="Loading" />
      </div>
      <iframe id="web-canvas" class="web-canvas" width="400" height="400" tabindex="-1"></iframe>
    </div>

    <div class="buttons">
      <button class="button close-button bordered sm">Close X</button>
    </div>
  </Container>
</div>

<script define:vars={{ src, aspectRatio: calculatedAspectRatio }}>
  document.addEventListener('astro:page-load', () => {
    // Elements
    const overlayMenu = document.querySelector('.WebGame .overlay-menu')
    const loader = document.querySelector('.WebGame .ProgressBar')
    const playButton = document.querySelector('.WebGame .play-button')
    const buttonsContainer = document.querySelector('.WebGame .buttons')
    const closeButton = document.querySelector('.WebGame .close-button')
    const canvasContainer = document.querySelector('.WebGame .canvas-container')
    const canvas = document.querySelector('#web-canvas')

    function adjustCanvas() {
      const width = Math.min(1200, Math.max(window.outerWidth - 20), window.innerWidth - 20)
      const height = Math.min(window.outerHeight - 20, width / aspectRatio)
      canvasContainer.style.width = `${width}px`
      canvasContainer.style.height = `${height}px`
      canvas.style.width = `${width}px`
      canvas.style.height = `${height}px`
    }

    adjustCanvas()

    /**
     * Starts the iframe game
     */
    async function startGame() {
      playButton.style.display = 'none'
      overlayMenu.style.display = 'none'
      buttonsContainer.style.opacity = 1
      canvas.src = src
    }

    // Handle events
    playButton?.addEventListener('click', () => {
      startGame()
    })
    closeButton?.addEventListener('click', () => {
      buttonsContainer.style.opacity = 0
      overlayMenu.style.display = 'flex'
      playButton.style.display = 'block'
      loader.style.opacity = 0
    })

    window.addEventListener('resize', () => {
      adjustCanvas()
    })
  })
</script>

<style>
  .WebGame {
    position: relative;
    width: auto;
    margin: 0 auto;

    .Container .contentContainer {
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
    }

    .canvas-container {
      position: relative;
    }

    .overlay-menu {
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      z-index: 10000;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      background-color: black;
      gap: 2em;
    }
    .play-button {
      color: black;
      padding: 1em 2em;
      font-size: 3rem;

      @media (max-width: 600px) {
        font-size: 2rem;
        padding: 2em 3em;
      }
    }

    .ProgressBar {
      width: 300px;
      opacity: 0;
    }

    .web-canvas {
      background-color: black;
      margin: 0 auto;
    }

    .buttons {
      margin-top: 1em;
      display: flex;
      align-items: center;
      justify-content: center;
      gap: 10px;
      opacity: 0;

      .button {
        color: black;
        padding: 1.5em 0.5em;
        font-size: 1.5rem;
        text-align: center;
      }
      .close-button {
        background-color: red;
        color: white;
      }
    }

    /* @media (max-width: 800px) {
      width: auto;
      margin: 0 auto;
    } */
  }
</style>
