---
interface Props {
  readonly full?: boolean
  readonly overlay?: boolean | 'dark'
}

const { full, overlay } = Astro.props
---

<div class:list={['pageWrapper', { full, withOverlay: !!overlay }]}>
  {
    overlay && (
      <div class:list={['overlay', overlay]}>
        <div style={{ backgroundImage: `url('/image/scene/trees-far.png')` }} class={'layer layerTop'} />
        <div style={{ backgroundImage: `url('/image/scene/trees-far.png')` }} class={'layer layerBottom'} />
      </div>
    )
  }

  <slot />
</div>

<style>
  .overlay {
    position: absolute;
    transform: translate3d(0, -5vh, 0);
    top: 15vh;
    bottom: 0;
    left: 0;
    right: 0;
    background: #07080d;
    z-index: -1;
    opacity: 0.7;

    &.dark {
      opacity: 0.9;
    }

    .layer {
      position: absolute;
      right: 0;
      left: 0;
      width: calc(100vw + 20px);
      max-width: 100vw;
      height: 30vh;
      background-position: bottom left;
      background-size: contain;
      background-repeat: repeat-x;
      image-rendering: pixelated;

      &.layerTop {
        top: -29vh;
      }
      &.layerBottom {
        transform: rotate(180deg);
        bottom: -29vh;
      }
    }

    @media (max-width: 850px) {
      top: 80px;

      .layer {
        width: 100vw;
        background-size: 850px !important;
        height: 200px;

        &.layerTop {
          top: -150px;
        }
        &.layerBottom {
          bottom: -150px;
        }
      }
    }
  }

  .pageWrapper {
    position: relative;
    display: block;
    align-items: center;
    width: 100%;
    color: white;

    &.full {
      margin-bottom: 30vh;
    }

    &.withOverlay {
      padding-top: 6em;
      padding-bottom: 3em;
    }

    &.limited {
      max-width: 600px;
    }
  }
</style>
